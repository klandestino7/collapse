@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using NxtStudio.Collapse;
@using System.Collections.Generic;
@using System.IO;

@namespace NxtStudio.Collapse.UI
@attribute [StyleSheet( "/ui/Map.scss" )]
@inherits Panel
@implements IDialog

@if ( !CollapsePlayer.Me.IsValid() ) return;

<root>
    <div @ref="Viewport" class="viewport">
        <div @ref="Container" class="map">
            <div @ref="Grid" class="grid">
                @for ( var x = 0; x < 10; x++ )
                {
                    for ( var y = 0; y < 10; y++ )
                    {
                        var squareSize = 200f;
                        var character = ((char)(65 + x)).ToString().ToUpper();
                        var left = (squareSize * x);
                        var top = (squareSize * y);

                        <div class="square" style="left: @(left)px; top: @(top)px;">
                            <label class="coord">@(character)@y</label>
                        </div>
                    }
                }
            </div>
            <img @ref="Drawing" class="drawing" />
        </div>

        <div tooltip="Follow You" class="recenter" onclick=@CenterOnPlayer>
            <i class="icon">filter_center_focus</i>
        </div>
    </div>
    <div class="control-panel">
        <label class="title">Color</label>
        <div class="colors">
            @foreach ( var kv in Colors )
            {
                <div class=@GetColorClass( kv.Key ) onclick=@(() => OnColorClick( kv.Value ))></div>
            }
        </div>

        <label class="title">Tools</label>
        <div class="tools">
            <div tooltip="Paint" class=@GetToolClass( DrawMode.Paint ) onclick=@(() => SetDrawMode( DrawMode.Paint ))>
                <i class="icon">brush</i>
            </div>
            <div tooltip="Eraser" class=@GetToolClass( DrawMode.Erase ) onclick=@(() => SetDrawMode( DrawMode.Erase ))>
                <i class="icon">auto_fix_normal</i>
            </div>
            <div tooltip="Marker" class=@GetToolClass( DrawMode.Marker ) onclick=@(() => SetDrawMode( DrawMode.Marker ))>
                <i class="icon">location_on</i>
            </div>
        </div>

        <label class="title">Brush Size</label>
        <div class="sizes">
            <div class=@GetSizeClass( 2f ) onclick=@(() => SetBrushSize( 2f ))></div>
            <div class=@GetSizeClass( 3f ) onclick=@(() => SetBrushSize( 3f ))></div>
            <div class=@GetSizeClass( 4f ) onclick=@(() => SetBrushSize( 4f ))></div>
            <div class=@GetSizeClass( 5f ) onclick=@(() => SetBrushSize( 5f ))></div>
        </div>
    </div>
</root>

@code
{
    public static Map Current { get; private set; }

    public bool AllowMovement => true;
    public bool IsOpen { get; private set; }

    private Panel Viewport { get; set; }
    private Panel Container { get; set; }
    private List<MapMarkerPanel> MapMarkers { get; set; } = new();
    private Vector2 PanVelocity { get; set; }
    private Panel Player { get; set; }
    private Image Drawing { get; set; }
    private Panel Grid { get; set; }
    private bool IsDrawing { get; set; }
    private bool IsPanning { get; set; }
    private float BrushSize { get; set; } = 2f;
    private bool MapHasChanged { get; set; }
    private DrawMode SelectedDrawMode { get; set; } = DrawMode.Paint;
    private Vector2 LastMousePosition { get; set; }
    private TimeUntil NextSaveMap { get; set; }
    private Vector2 Position { get; set; }
    private Color SelectedColor { get; set; } = Color.Red;
    private bool FollowPlayer { get; set; } = true;
    private Vector3 PanStartPosition { get; set; }
    private Dictionary<string, Color> Colors { get; set; } = new()
    {
        ["red"] = Color.Red,
        ["green"] = Color.Green,
        ["blue"] = Color.Blue,
        ["orange"] = Color.Orange,
        ["yellow"] = Color.Yellow,
        ["magenta"] = Color.Magenta,
        ["black"] = Color.Black
    };

    private class MapMarkerPanel : Panel
    {
        public MapMarker Marker { get; set; }
    }

    public void Open()
    {
        if ( IsOpen ) return;
        Dialog.Activate( this );
        IsOpen = true;
    }

    public void Close()
    {
        if ( !IsOpen ) return;
        Dialog.Deactivate( this );
        IsOpen = false;
    }

    public override void Tick()
    {
        if ( Drawing is null ) return;
        if ( Player is null ) return;

        Drawing.Texture = Map.GetOrCreateTexture();

        var localPlayer = CollapsePlayer.Me;
        if ( !localPlayer.IsValid() ) return;

        var rotation = localPlayer.Rotation.Inverse.Yaw();

        var tx = new PanelTransform();
        tx.AddTranslateX( Length.Fraction( -0.5f ) );
        tx.AddTranslateY( Length.Fraction( -0.5f ) );
        tx.AddRotation( 0f, 0f, rotation + 90f );

        Player.Style.Transform = tx;

        var playerPosition = GetPanelLocalPosition( Player, localPlayer.Position );

        Player.Style.Left = Length.Fraction( playerPosition.x );
        Player.Style.Top = Length.Fraction( playerPosition.y );

        foreach ( var marker in MapMarkers ) 
        {
            var position = GetPanelLocalPosition( marker, marker.Marker.Position );
            marker.Style.Left = Length.Fraction( position.x );
            marker.Style.Top = Length.Fraction( position.y );
        }

        if ( FollowPlayer )
        {
            FocusOn( playerPosition.x, playerPosition.y );
        }

        UpdatePosition();

        base.Tick();
    }

    private Vector3 GetWorldPosition( Vector2 panelPosition )
    {
        var mapBounds = Game.PhysicsWorld.Body.GetBounds();
        var origin = mapBounds.Mins + mapBounds.Maxs;
        var px = (mapBounds.Size.x * panelPosition.x) - (mapBounds.Size.x * 0.5f);
        var py = (mapBounds.Size.y * panelPosition.y) - (mapBounds.Size.y * 0.5f);

        px += (origin.x * 0.5f);
        py -= (origin.y * 0.5f);

        return new Vector3( px, -py );        
    }

    private Vector2 GetPanelLocalPosition( Panel panel, Vector3 worldPosition )
    {
        var mapBounds = Game.PhysicsWorld.Body.GetBounds();
        var position = new Vector2( worldPosition );
        var origin = mapBounds.Mins + mapBounds.Maxs;

        position.x += (mapBounds.Size.x * 0.5f) - (origin.x * 0.5f);
        position.y += (mapBounds.Size.y * 0.5f) - (origin.y * 0.5f);

        var fx = position.x / mapBounds.Size.x;
        var fy = position.y / mapBounds.Size.y;

        return new Vector2( fx, 1f - fy );
    }

    private void FocusOn( float px, float py )
    {
        var vp = Viewport.Box.Rect;
        var vw = vp.Width;
        var vh = vp.Height;

        var cp = Container.Box.Rect;
        var dw = cp.Width - vw;
        var dh = cp.Height - vh;

        var realX = -(cp.Width * px) + (vw * 0.5f);
        var realY = -(cp.Height * py) + (vh * 0.5f);

        realX = Math.Min( realX, 0f );
        realY = Math.Min( realY, 0f );

        realX = Math.Max( realX, -dw );
        realY = Math.Max( realY, -dh );

        Position = new Vector2( realX / cp.Width, realY / cp.Height );
    }

    protected override void OnClick( MousePanelEvent e )
    {
        var vp = Viewport.Box.Rect;
        var point = Mouse.Position;

        if ( SelectedDrawMode == DrawMode.Marker && vp.IsInside( Mouse.Position ) )
        {
            var box = Container.Box.Rect;
            var rx = (point.x - box.Left);
            var ry = (point.y - box.Top);
            var x = rx.Clamp( 0, box.Width );
            var y = ry.Clamp( 0, box.Width );
            var fx = (x / box.Width);
            var fy = (y / box.Height);

            var worldPosition = GetWorldPosition(new Vector2( fx, fy ));

            foreach ( var marker in MapMarkers )
            {
                if ( marker.Marker.Position.Distance( worldPosition ) <= 100f )
                {
                    CollapsePlayer.RemoveMapMarker( worldPosition.ToCSV() );
                    return;
                }
            }

            if ( MapMarkers.Count > 6 ) return;

            CollapsePlayer.AddMapMarker( worldPosition.ToCSV(), SelectedColor.Hex );
        }

        base.OnClick( e );
    }

    protected override void OnMouseMove( MousePanelEvent e )
    {
        if ( IsPanning )
        {
            PanVelocity += Mouse.Delta;
        }

        base.OnMouseMove( e );
    }

    protected override void OnMouseDown( MousePanelEvent e )
    {
        if ( e.Button == "mouseleft" )
        {
            LastMousePosition = Mouse.Position;
            IsDrawing = true;
        }

        if ( e.Button == "mouseright" )
        {
            FollowPlayer = false;
            IsPanning = true;
        }

        base.OnMouseDown( e );
    }

    protected override void OnMouseUp( MousePanelEvent e )
    {
        if ( e.Button == "mouseleft")
        {
            IsDrawing = false;
        }

        if ( e.Button == "mouseright" )
        {
            IsPanning = false;
        }

        base.OnMouseUp( e );
    }

    protected override void OnParametersSet()
    {
        Current?.Delete(true);

        BindClass( "is-panning", () => IsPanning );
        BindClass( "is-drawing", () => IsDrawing );
        BindClass( "hidden", () => !IsOpen );

        Current = this;

        base.OnParametersSet();
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        Drawing.Texture = Map.GetOrCreateTexture();

        CreateMapMarkers();
        CreatePlayerMarker();
        UpdatePosition();

        base.OnAfterTreeRender( firstTime );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( CollapsePlayer.Me, SelectedColor, SelectedDrawMode, CollapsePlayer.Me?.Markers?.Count ?? 0 );
    }

    private string GetSizeClass( float size )
    {
        var isSelected = (BrushSize == size);
        return $"size brush-{size.FloorToInt()} {(isSelected ? "selected" : "")}";
    }

    private string GetToolClass( DrawMode mode )
    {
        var isSelected = (SelectedDrawMode == mode);
        return $"tool {mode.ToString().ToLower()} {(isSelected ? "selected" : "")}";
    }

    private string GetColorClass( string colorName )
    {
        var color = Colors[colorName];
        var isSelected = (SelectedColor == color);
        return $"color {colorName} {(isSelected ? "selected" : "")}";
    }

    private void CenterOnPlayer()
    {
        FollowPlayer = true;
    }

    [Event.Tick.Client]
    private void ClientTick()
    {
        if ( string.IsNullOrEmpty( CollapseGame.UniqueSaveId ) ) return;
        if ( Drawing?.Texture is null ) return;
        if ( !NextSaveMap ) return;

        if ( MapHasChanged )
        {
            var fileName = $"maps/{CollapseGame.UniqueSaveId}.map";

            FileSystem.Data.CreateDirectory( $"maps" );

            using ( var writer = FileSystem.Data.OpenWrite( fileName, FileMode.Create ) )
            {
                writer.Write( Compress( Map.Data ) );
            } 
        }

        MapHasChanged = false;
        NextSaveMap = 10f;
    }

    private void SetBrushSize( float size )
    {
        BrushSize = size;
    }

    private void SetDrawMode( DrawMode mode )
    {
        SelectedDrawMode = mode;
    }

    private void OnColorClick( Color color )
    {
        SelectedColor = color;
    }

    private void UpdatePosition()
    {
        var cp = Container.Box.Rect;
        Container.Style.Left = Length.Pixels( cp.Width * Position.x * ScaleFromScreen );
        Container.Style.Top = Length.Pixels( cp.Height * Position.y * ScaleFromScreen );
    }

    private void CreateMapMarkers()
    {
        MapMarkers.ForEach( m => m.Delete( true ) );
        MapMarkers.Clear();

        foreach ( var marker in CollapsePlayer.Me.Markers )
        {
            var panel = Container.AddChild<MapMarkerPanel>( "marker" );
            panel.Style.BackgroundTint = marker.Color.WithAlpha( 1f );
            panel.Marker = marker;
            MapMarkers.Add( panel );
        }
    }

    private void CreatePlayerMarker()
    {
        Player?.Delete( true );
        Player = Container.AddChild<Panel>( "player" );
    }

    [Event.Client.Frame]
    private void OnFrame()
    {
        if ( !PanVelocity.IsNearZeroLength )
        {
            var cp = Container.Box.Rect;
            var nx = (cp.Width * Position.x) + PanVelocity.x * 40f * Time.Delta;
            var ny = (cp.Height * Position.y) + PanVelocity.y * 40f * Time.Delta;

            nx = Math.Min( nx, 0f );
            ny = Math.Min( ny, 0f );

            var vp = Viewport.Box.Rect;
            var vw = vp.Width;
            var vh = vp.Height;

            var dw = cp.Width - vw;
            var dh = cp.Height - vh;

            nx = Math.Max( nx, -dw );
            ny = Math.Max( ny, -dh );

            Position = new Vector2( nx / cp.Width, ny / cp.Height );

            UpdatePosition();

            PanVelocity -= PanVelocity * Time.Delta * 8f;
        }

        if ( !IsVisible || Container is null ) return;
        if ( !IsDrawing ) return;
        if ( SelectedDrawMode == DrawMode.Marker ) return;

        var box = Drawing.Box.Rect;

        var start = LastMousePosition;
        var end = Mouse.Position;
        var points = new Vector2[10];

        for ( var i = 0; i < 10; i++ )
        {
            points[i].x = ((start.x - end.x) / 10f) * i + end.x;
            points[i].y = ((start.y - end.y) / 10f) * i + end.y;
        }

        foreach ( var point in points )
        {
            if ( box.IsInside( point ) )
            {
                var rx = (point.x - box.Left) * (Map.Texture.Width / box.Width);
                var ry = (point.y - box.Top) * (Map.Texture.Height / box.Height);
                var x = rx.CeilToInt().Clamp( 0, Map.Texture.Width - 1 );
                var y = ry.CeilToInt().Clamp( 0, Map.Texture.Height - 1 );

                if ( SelectedDrawMode == DrawMode.Paint )
                    Map.Draw( x, y, BrushSize, SelectedColor );
                else
                    Map.Draw( x, y, BrushSize, Color.Transparent );
            }
        }

        LastMousePosition = Mouse.Position;
        MapHasChanged = true;
    }
}
