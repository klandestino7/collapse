@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.Forsaken;
@using System.Collections.Generic;

@namespace Facepunch.Forsaken.UI
@attribute [StyleSheet( "/ui/crafting/Crafting.scss" )]
@inherits Panel
@implements IDialog

@if ( !ForsakenPlayer.Me.IsValid() ) return;

@{
    var equipment = ForsakenPlayer.Me.Equipment;
    if (!equipment.IsValid()) return;

    var backpack = ForsakenPlayer.Me.Backpack;
    if ( !backpack.IsValid() ) return;

    var hotbar = ForsakenPlayer.Me.Hotbar;
    if ( !hotbar.IsValid() ) return;
}

<root>
	<div class="vertical">
		<label class="title">Crafting</label>
		<div class="horizontal">
			<div class="left">
                <TextEntry @ref="TextEntry" text=@SearchQuery OnTextEdited=@OnSearchQueryChanged class="search" placeholder="Search recipes..." icon="search"></TextEntry>
				<div class="categories">
                    <CraftingCategory
                        OnSelected=@OnCategorySelected
                        IsSelected=@(!SelectedCategory.HasValue)>
                    </CraftingCategory>

                    @foreach ( var category in (RecipeCategory[])Enum.GetValues( typeof( RecipeCategory ) ) )
                    {
                        if (category == RecipeCategory.None) continue;

                        <CraftingCategory
                            Category=@category
                            OnSelected=@OnCategorySelected
                            IsSelected=@(SelectedCategory.HasValue && SelectedCategory.Value == category)>
                         </CraftingCategory>
                    }
				</div>
			</div>
			<div class="middle">
				<div class="items">
                    @foreach ( var recipe in GetCategoryRecipes() )
                    {
                        <CraftingRecipe Recipe=@recipe OnSelected=@OnRecipeSelected IsSelected=@(SelectedRecipe == recipe)></CraftingRecipe>
                    }
				</div>
			</div>
			<div class="right">
                @if ( SelectedRecipe == null )
                {
				    <label class="item-name">Crafting</label>
                    <label class="item-description">Items can be crafted from recipes. Select a recipe to see its requirements.</label>
                }
                else
                {
                    var output = InventorySystem.GetDefinition( SelectedRecipe.Output );

                    @if ( SelectedRecipe.StackSize == 1 )
                    {
                        <label class="item-name">@output.Name</label>                        
                    }
                    else
                    {
                        <label class="item-name">@output.Name (x@(SelectedRecipe.StackSize))</label>
                    }

                    <label class="item-description">@output.Description</label>

				    <div class="inputs">
                        @foreach ( var kv in SelectedRecipe.Inputs )
                        {
                            var input = InventorySystem.GetDefinition( kv.Key );
                            if (!input.IsValid()) continue;

                            var canAfford = false;

                            if ( ForsakenPlayer.Me.HasItems( kv.Key, kv.Value * Quantity ) )
                                canAfford = true;

                            <div class="input">
                                <div class="name">@input.Name</div>
                                <div class="quantity @(!canAfford ? "cannot-afford" : "")">x@(kv.Value * Quantity)</div>
                            </div>
                        }
                    </div>

				    <div class="craft-box">
					    <div onclick=@OnLessClicked class="less-button">
						    <label>-</label>
					    </div>
					    <div class="current">
                            <label class="amount">@Quantity</label>
					    </div>
					    <div onclick=@OnMoreClicked class="more-button">
						    <label>+</label>
					    </div>

					    <div onclick=@OnCraftClicked class="craft-button">
						    <label>Craft</label>
					    </div>
				    </div>
                }
            </div>
		</div>
        <div class="queue">
            <div class="title">Queue</div>
		    <div class="queue-items">
                @{
                    var craftingQueue = ForsakenPlayer.Me.CraftingQueue;
                }

                @for ( var i = 0; i < 10; i++ )
                {
                    if (craftingQueue.Count > i)
                    {
                        <CraftingQueueItem Entry=@craftingQueue[i] OnSelected=@OnCraftingEntrySelected></CraftingQueueItem>
                    }
                    else
                    {
                        <CraftingQueueItem></CraftingQueueItem>
                    }
                }
		    </div>
        </div>
	</div>
</root>

@code
{
    public static Crafting Current { get; private set; }

    public bool IsOpen { get; set; }

    private RecipeCategory? SelectedCategory { get; set; }
    private RecipeResource SelectedRecipe { get; set; }
    private TextEntry TextEntry { get; set; }
    private string SearchQuery { get; set; }
    private int Quantity { get; set; }

    public Crafting()
    {
        BindClass( "hidden", () => !IsOpen );
        Current = this;
    }

    public void Open()
    {
        if ( IsOpen ) return;
        Dialog.Activate( this );
        IsOpen = true;
    }

    public void Close()
    {
        if ( !IsOpen ) return;
        Dialog.Deactivate( this );
        SearchQuery = "";
        IsOpen = false;
    }

    protected override int BuildHash()
    {
        if ( !ForsakenPlayer.Me.IsValid() ) return 0;
        return HashCode.Combine( ForsakenPlayer.Me, SelectedRecipe, SelectedCategory, SearchQuery, Quantity, ForsakenPlayer.Me.CraftingQueue.Count );
    }

    private void OnSearchQueryChanged( string value )
    {
        SearchQuery = value;
    }

    private void OnLessClicked()
    {
        if ( Quantity == 1 ) return;
        Quantity--;
    }

    private void OnMoreClicked()
    {
        if ( SelectedRecipe == null ) return;

        if ( ForsakenPlayer.Me.CanCraftRecipe( SelectedRecipe, Quantity + 1 ) )
            Quantity++;
    }

    private void OnCraftClicked()
    {
        if ( SelectedRecipe == null ) return;
        if ( !ForsakenPlayer.Me.CanCraftRecipe( SelectedRecipe, Quantity ) ) return;
        ForsakenPlayer.AddCraftingCmd( SelectedRecipe.ResourceName, Quantity );
    }

    private IEnumerable<RecipeResource> GetCategoryRecipes()
    {
        var recipes = ResourceLibrary.GetAll<RecipeResource>();

        foreach ( var recipe in recipes )
        {
            if ( recipe.Category == RecipeCategory.None )
                continue;

            if ( !SelectedCategory.HasValue || SelectedCategory.Value == recipe.Category )
            {
                var definition = InventorySystem.GetDefinition( recipe.Output );

                if ( definition.IsValid() )
                {
                    if ( string.IsNullOrEmpty( SearchQuery ) || definition.Name.ToLower().Contains( SearchQuery.ToLower() ) )
                        yield return recipe; 
                }
            }
        }
    }

    private void OnCraftingEntrySelected( CraftingQueueEntry entry )
    {
        var index = ForsakenPlayer.Me.CraftingQueue.IndexOf( entry );
        if ( index < 0 ) return;

        ForsakenPlayer.CancelCraftingCmd( index );
    }

    private void OnRecipeSelected( RecipeResource recipe )
    {
        if ( SelectedRecipe == recipe )
        {
            SelectedRecipe = null;
            return;
        }

        SelectedRecipe = recipe;
        Quantity = 1;
    }

    private void OnCategorySelected( RecipeCategory? category )
    {
        SelectedCategory = category;
    }
}
