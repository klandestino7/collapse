@using System;
@using Sandbox;
@using Sandbox.UI;
@using NxtStudio.Collapse;

@namespace NxtStudio.Collapse.UI
@attribute [StyleSheet( "/ui/nametags/Nametag.scss" )]
@inherits Panel

@if ( !Provider.IsValid() ) return;
@if ( !Provider.ShowNametag ) return;

<root class="@(Provider.IsInactive ? "inactive" : "")">
    <div @ref="Dot" class="dot"></div>
    <label @ref="Name" class="name">@Provider.DisplayName</label>
</root>

@code
{
    public INametagProvider Provider { get; set; }

    private Label Name { get; set; }
    private Panel Dot { get; set; }

    public override void Tick()
    {
        var isHidden = true;
        var position = (Provider.EyePosition - Provider.Rotation.Forward * 20f).ToScreen();

        if ( position.z >= 0f )
        {
            var distance = Camera.Main.Position.Distance( Provider.EyePosition );
            var maxDistance = 1024f;

            if ( distance <= maxDistance )
            {
                position.x *= Screen.Size.x * ScaleFromScreen;
                position.y *= Screen.Size.y * ScaleFromScreen;

                Style.Opacity = distance.Remap( 0f, maxDistance, 1f, 0f );
                Style.Left = Length.Pixels( position.x );
                Style.Top = Length.Pixels( position.y );

                isHidden = false;
            }
        }

        SetClass( "hidden", isHidden );

        base.Tick();
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        if ( Provider.IsValid() && Provider.ShowNametag )
        {
            Name.Style.FontColor = Provider.NametagColor;
            Dot.Style.BackgroundColor = Provider.NametagColor;
        }

        base.OnAfterTreeRender( firstTime );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Provider, Provider.DisplayName, Provider.ShowNametag, Provider.IsInactive );
    }
}
